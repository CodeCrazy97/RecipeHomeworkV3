{"ast":null,"code":"var _jsxFileName = \"/mnt/c/projects/hackernews/src/App.js\";\nimport \"./App.css\";\nimport React, { Component } from \"react\";\nconst PATH_BASE = \"http://gtest.dev.wwbtc.com\";\nconst JSON_EXTENSION = \"/json/rec\"; // displayOtherRecipe: called when Previous or Next buttons is clicked. Determines which recipe to display next.\n\nfunction displayOtherRecipe(index) {\n  if (index == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nasync function apiGetAll() {\n  try {\n    const URL = PATH_BASE + JSON_EXTENSION;\n    const resp = await fetch(URL);\n    const newResp = await somePromise(resp);\n    return newResp;\n  } catch (err) {\n    // all errors will be captured here for anything in the try block\n    console.log(err);\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.previousButtonClick = oldIndex => {\n      this.selectedIndex = displayOtherRecipe(oldIndex); // Set the currently viewed recipe to the one that was clicked.\n\n      this.setState({\n        selectedIndex: this.selectedIndex\n      });\n    };\n\n    this.nextButtonClick = oldIndex => {\n      this.selectedIndex = displayOtherRecipe(oldIndex);\n      this.setState({\n        selectedIndex: this.selectedIndex\n      });\n    };\n\n    this.imageClick = index => {\n      this.selectedIndex = index;\n      this.setState({\n        selectedIndex: this.selectedIndex\n      });\n    };\n\n    this.state = {\n      recipes: [{}],\n      imageClick: this.imageClick,\n      previousButtonClick: this.previousButtonClick,\n      nextButtonClick: this.nextButtonClick\n    };\n    this.selectedIndex = 0; // Keeps track of which index into the recipes array was clicked. Default is first recipe in the list.\n\n    this.imageClick = this.imageClick.bind(this);\n    this.previousButtonClick = this.previousButtonClick.bind(this);\n    this.nextButtonClick = this.nextButtonClick.bind(this);\n  }\n\n  componentDidMount() {\n    const url = \"\".concat(PATH_BASE, JSON_EXTENSION);\n    fetch(url).then(response => response.json()).then(data => this.setState({\n      recipes: data\n    }));\n  } // Called when Previous button is clicked.\n\n\n  render() {\n    apiGetAll();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"split-left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, this.state.recipes && React.createElement(RecipeCollection, {\n      list: this.state.recipes,\n      state: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })), React.createElement(Recipe, {\n      index: this.selectedIndex,\n      state: this.state,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  }\n\n} // createMarkup: returns the data in HTML format. Used with JSON that contains HTML elements.\n// data - the JSON text that (may) contain HTML elements.\n\n\nfunction createMarkup(data) {\n  return {\n    __html: data\n  };\n} // Recipe: shows details about the first recipe in the list or a recipe that has been clicked on.\n\n\nconst Recipe = ({\n  index,\n  state\n}) => React.createElement(\"div\", {\n  className: \"split-right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 98\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 99\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  src: PATH_BASE + state.recipes[index].field_images,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 100\n  },\n  __self: this\n})), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 102\n  },\n  __self: this\n}, React.createElement(\"h1\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 103\n  },\n  __self: this\n}, \" \", state.recipes[index].title, \" \")), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105\n  },\n  __self: this\n}, React.createElement(\"h2\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 106\n  },\n  __self: this\n}, \" Ingredients: \", state.recipes[index].field_ingredients, \" \")), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 108\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  dangerouslySetInnerHTML: createMarkup(state.recipes[index].body),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 109\n  },\n  __self: this\n})), React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 111\n  },\n  __self: this\n}, React.createElement(\"input\", {\n  className: \"bottom-left-button\",\n  type: \"button\",\n  value: \"Previous\",\n  onClick: () => state.previousButtonClick(index),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 112\n  },\n  __self: this\n}), React.createElement(\"input\", {\n  className: \"bottom-right-button\",\n  type: \"button\",\n  value: \"Next\",\n  onClick: () => state.nextButtonClick(index),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 118\n  },\n  __self: this\n}))); // RecipeCollection: displays a brief summary of the recipes on the left-hand side of the screen.\n\n\nconst RecipeCollection = ({\n  list,\n  state\n}) => React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 130\n  },\n  __self: this\n}, list.map((item, index) => React.createElement(\"div\", {\n  key: item.objectID,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 132\n  },\n  __self: this\n}, React.createElement(\"a\", {\n  style: {\n    cursor: \"pointer\"\n  },\n  type: \"button\",\n  className: \"card-link\",\n  onClick: () => state.imageClick(index),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 133\n  },\n  __self: this\n}, React.createElement(\"span\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 139\n  },\n  __self: this\n}, React.createElement(\"img\", {\n  class: \"small-image\",\n  src: PATH_BASE + item.field_images,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 140\n  },\n  __self: this\n})), React.createElement(\"span\", {\n  class: \"text-right\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 142\n  },\n  __self: this\n}, React.createElement(\"h3\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 143\n  },\n  __self: this\n}, \" \", item.title, \" \"), React.createElement(\"h4\", {\n  dangerouslySetInnerHTML: createMarkup(item.field_summary),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 144\n  },\n  __self: this\n}))), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 147\n  },\n  __self: this\n}), React.createElement(\"br\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}))));\n\nexport default App;\nexport { App, Recipe, RecipeCollection };","map":{"version":3,"sources":["/mnt/c/projects/hackernews/src/App.js"],"names":["React","Component","PATH_BASE","JSON_EXTENSION","displayOtherRecipe","index","apiGetAll","URL","resp","fetch","newResp","somePromise","err","console","log","App","constructor","props","previousButtonClick","oldIndex","selectedIndex","setState","nextButtonClick","imageClick","state","recipes","bind","componentDidMount","url","concat","then","response","json","data","render","createMarkup","__html","Recipe","field_images","title","field_ingredients","body","RecipeCollection","list","map","item","objectID","cursor","field_summary"],"mappings":"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","sourcesContent":["import \"./App.css\";\nimport React, { Component } from \"react\";\n\nconst PATH_BASE = \"http://gtest.dev.wwbtc.com\";\nconst JSON_EXTENSION = \"/json/rec\";\n\n// displayOtherRecipe: called when Previous or Next buttons is clicked. Determines which recipe to display next.\nfunction displayOtherRecipe(index) {\n  if (index == 0) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nasync function apiGetAll() {\n  try {\n    const URL = PATH_BASE + JSON_EXTENSION;\n    const resp = await fetch(URL);\n    const newResp = await somePromise(resp);\n\n    return newResp;\n  } catch (err) {\n    // all errors will be captured here for anything in the try block\n    console.log(err);\n  }\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      recipes: [{}],\n      imageClick: this.imageClick,\n      previousButtonClick: this.previousButtonClick,\n      nextButtonClick: this.nextButtonClick\n    };\n\n    this.selectedIndex = 0; // Keeps track of which index into the recipes array was clicked. Default is first recipe in the list.\n    this.imageClick = this.imageClick.bind(this);\n    this.previousButtonClick = this.previousButtonClick.bind(this);\n    this.nextButtonClick = this.nextButtonClick.bind(this);\n  }\n\n  componentDidMount() {\n    const url = \"\".concat(PATH_BASE, JSON_EXTENSION);\n\n    fetch(url)\n      .then(response => response.json())\n      .then(data => this.setState({ recipes: data }));\n  }\n\n  // Called when Previous button is clicked.\n  previousButtonClick = oldIndex => {\n    this.selectedIndex = displayOtherRecipe(oldIndex);\n\n    // Set the currently viewed recipe to the one that was clicked.\n    this.setState({ selectedIndex: this.selectedIndex });\n  };\n\n  // Called when Next button is clicked.\n  nextButtonClick = oldIndex => {\n    this.selectedIndex = displayOtherRecipe(oldIndex);\n    this.setState({ selectedIndex: this.selectedIndex });\n  };\n\n  // imageClick: called when a recipe picture, title, or summary is clicked\n  // Will take user to page that displays the details of the recipe.\n  imageClick = index => {\n    this.selectedIndex = index;\n    this.setState({ selectedIndex: this.selectedIndex });\n  };\n\n  render() {\n    apiGetAll();\n    return (\n      <div>\n        <div className=\"split-left\">\n          {this.state.recipes && (\n            <RecipeCollection list={this.state.recipes} state={this.state} />\n          )}\n        </div>\n        <Recipe index={this.selectedIndex} state={this.state} />\n      </div>\n    );\n  }\n}\n\n// createMarkup: returns the data in HTML format. Used with JSON that contains HTML elements.\n// data - the JSON text that (may) contain HTML elements.\nfunction createMarkup(data) {\n  return { __html: data };\n}\n\n// Recipe: shows details about the first recipe in the list or a recipe that has been clicked on.\nconst Recipe = ({ index, state }) => (\n  <div className=\"split-right\">\n    <span>\n      <img src={PATH_BASE + state.recipes[index].field_images} />\n    </span>\n    <span>\n      <h1> {state.recipes[index].title} </h1>\n    </span>\n    <span>\n      <h2> Ingredients: {state.recipes[index].field_ingredients} </h2>\n    </span>\n    <span>\n      <h3 dangerouslySetInnerHTML={createMarkup(state.recipes[index].body)} />\n    </span>\n    <span>\n      <input\n        className=\"bottom-left-button\"\n        type=\"button\"\n        value=\"Previous\"\n        onClick={() => state.previousButtonClick(index)}\n      />\n      <input\n        className=\"bottom-right-button\"\n        type=\"button\"\n        value=\"Next\"\n        onClick={() => state.nextButtonClick(index)}\n      />\n    </span>\n  </div>\n);\n\n// RecipeCollection: displays a brief summary of the recipes on the left-hand side of the screen.\nconst RecipeCollection = ({ list, state }) => (\n  <div>\n    {list.map((item, index) => (\n      <div key={item.objectID}>\n        <a\n          style={{ cursor: \"pointer\" }}\n          type=\"button\"\n          className=\"card-link\"\n          onClick={() => state.imageClick(index)}\n        >\n          <span>\n            <img class=\"small-image\" src={PATH_BASE + item.field_images} />\n          </span>\n          <span class=\"text-right\">\n            <h3> {item.title} </h3>\n            <h4 dangerouslySetInnerHTML={createMarkup(item.field_summary)} />\n          </span>\n        </a>\n        <br />\n        <br />\n      </div>\n    ))}\n  </div>\n);\n\nexport default App;\n\nexport { App, Recipe, RecipeCollection };\n"]},"metadata":{},"sourceType":"module"}